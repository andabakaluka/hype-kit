// ==========================================================================
/// General mixins
/// @category tools
/// @group mixins
//
/// Global mixins available to the entire project. Define file-specific
/// mixins inside the file to which they relate.
// ==========================================================================

/// Mixin to drop micro clearfix into a selector.
/// @group mixins
///
/// @example
///  .simple-usage {
///   @include clearfix();
///  }
///
///  .detailed-usage {
///   @include clearfix(important);
///  }

@mixin clearfix($important: false) {

    // Determine whether or not to make declarations important.
    @if ($important == false) {
        $important: null;
    } @else {
        $important: !important;
    }

    &:after {
        content: "" $important;
        display: table $important;
        clear: both $important;
    }

}


/// Generate `:hover` and `:focus` styles in one go.
/// @example
///  .simple-usage {
///   @include hocus();
///  }

@mixin hocus() {
    &:hover,
    &:focus {
        @content;
    }
}

// CSS helpers
// =============================================================================

@mixin circular {
    border-radius: 1000px; // Android 2.3 cannot deal with '50%'
}

/// Vertical linear gradient with a plain fallback for older browsers
@mixin simple-gradient($from, $to) {
    // Fix for browsers not understanding transparent
    @if $from == transparent {
        $from: transparentize($to, 1);
    }

    @if $to == transparent {
        $to: transparentize($from, 1);
    }
    background-color: $from;
    background-image: linear-gradient(to bottom, $from, $to);
}

@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

/// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

/// Clamps a block of text to a certain number of lines,
/// followed by an ellipsis in Webkit and Blink based browsers
/// Reference: http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines;
    }
}

@mixin ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


@mixin absolute-center {
    // this is a pattern for horizontally and vertically centering an element within its container
    // the negative values expand the box in which the element is centered, which is required when the element
    // is bigger than its container (can be increased if required)
    position: absolute;
    top: -20px;
    bottom: -20px;
    left: -20px;
    right: -20px;
    margin: auto;
}

%absolute-center {
    @include absolute-center;
}
